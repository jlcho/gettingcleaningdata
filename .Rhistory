source('C:/Users/choje2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
cacheSolve(x)
source('C:/Users/choje2/ProgrammingAssignment2/cachematrix.R')
+## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
-
+    inv <- NULL
+    set <- function(y) {
+        x <<- y
+        inv <<- NULL
+    }
+    get <- function() x
+    setinverse <- function(solve)inv <<- inverse
+    getinverse <- function() inv
+    list(set = set, get = get,
+         setinverse = setinverse,
+         getinverse = getinverse)
}
-
-
-## Write a short comment describing this function
-
+## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
+## If the inverse has already been calculated (and the matrix has not changed),
+## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
-        ## Return a matrix that is the inverse of 'x'
+    inv <- x$getinverse()
+    if(!is.null(inv)) {
+        message("getting cached data")
+        return(inv)
+    }
+    data <- x$get()
+    inv <- solve(data, ...)
+    x$setinverse(inv)
+    inv
+    ## Return a matrix that is the inverse of 'x'
}
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
library(swirl)
install_from_Swirl("R Programming")
install_from_swirl("R Programming")
identical(twins,twins)
identical(twins,twins)
identical(twins,twins)
identical('twins','twins')
identical("twins","twins")
swirl()
library(swirl)
swirl()
sapply(flags,unique)
vapply(falgs,unique,numeric(1))
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flag$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmasses,summary)
tapply(flags$population,flags$landmass,summary)
ls(plants)
ls
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,prob=c(0.3,0.7), reaplce=TRUE)
flips<-sample(c(0,1),100,prob=c(0.3,0.7), replace=TRUE)
flips
sum(flips)
?binom
?rbinom
rbinom(1,size=100,prob=(0.7))
rbinom(n=1,size=100,prob=(0.7))
rbinom(n=1,size=100,prob=(0.7))
rbinom(1,size=100,prob=0.7)
flips2<-
a
flips2<-rnorm(2,size=100,prob=0.7)
flips2<-rnorm(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(n=100,size=1,prob=0.7)
flips2
sum(heads)
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10,mean=100, sd=25)
rpois(5,mean=10)
pnorm(5,mean=10)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(dl)
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
list(t2)
ls(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%B %d %Y %H:%M")
strptime(t3,"%B %d,%Y %H:%M")
t4<-strptime(t3,"%B %d,%Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist,xlab="Speed")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,xlab="Speed",ylab="Stopping Distance")
sum(cars)
plot(cars,main="My Plot")
plot(cars,sub="My Plot Substitle")
plot(cars,sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub ="My Plot Substitle")
plot(cars)
plot(cars, sub ="My Plot Substitle")
plot(cars)
plot(cars, sub = "My Plot Substitle")
info()
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, subtitle = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
plot(cars, sub = "My Plot Substitle")
cars
plot(cars, sub = "My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15),col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl)
boxplot(formula=mpg~cyl)
boxplot(formula=mpg~cyl)
boxlot(mpg~cyl,mtcars)
boxplot(mpg~cyl,mtcars)
his(mtcars$mpg)
hist(mtcars$mpg)
fileurl="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fownload.file(fileurl, destfile="quiz1.csv")
download.file(fileurl, destfile="quiz1.csv")
quiz1<-read.csv("quiz1.csv")
quiz
summary(quiz1)
quiz1$VAL>1000000
sum(quiz1$VAL>1000000)
sum(quiz1$VAL>1000000, na.rm=TRUE)
summary(quiz1$VAL)
quiz1$VAL
quiz1$VAL>24
sum(quiz1$VAL>24, rm.na=TRUE)
sum(quiz1$VAL>24, na.rm = =TRUE)
sum(quiz1$VAL>24, na.rm=TRUE)
sum(quiz1$VAL==24, na.rm=TRUE)
quiz1$FES
csvurl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
csvurl <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx
"
csv<-read.csv(csvurl)
csv
excelurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dat<-read.xlsx(excelurl, rowIndex=18:23, colIndex=7:15)
dat<-read.xlsx(excelurl, rowIndex=18:23, colIndex=7:15)
insta..packages("readxl")
install.packages("readxl")
dat<-read.xlsx(excelurl, rowIndex=18:23, colIndex=7:15)
install.packages("xlsx")
dat<-read.xlsx(excelurl, rowIndex=18:23, colIndex=7:15)
install.packages("readxlsx")
read.xlsx
read.xlsx()
install.packages("xlsx")
read.xlsx()
install.packages("xlsx")
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dat<-read.xlsx(fileurl, rowIndex=18:23, colIndex=7:15)
install.packages("xlsx")
install.packages("openxlsx")
read.xlsx
read.xlsx()
source(xlsx)
source("xlsx")
libary()
library()
search(xlsx)
search()
xlsx::
libary(xlsx)
library('xlsx')
install.packages('xlsx')
libary(xlsx)
library(xlsx)
install.packages('rJava')
library(xlsx)
install.packages("ggplot2")
install.packages("lattice")
library(ggplot2)
data(mpg)
qplot(displ,hwy,data=mpg)
libary(datasets)
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind,Ozone))
quartz()
postscript()
png()
?png
?glm
install.packages(knitr)
install.packages("knitr")
setwd("~/R/Coursera/Reproducible Research/PeerAssessment2")
url<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
stormdata<-read.csv(download.file(url,"repdata%2Fdata%2FStormData.csv.bz2"))
stormdata<-read.csv("repdata%2Fdata%2FStormData.csv.bz2")
str(stormdata)
stormdata$EVTYPE
str(stormdata)
summary(Stormdata)
summary(stormdata)
str(stormdata)
tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum))
name(max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)))
names(max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)))
max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum))
names(max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)))
max(tapply(stormdata$INJURIES, stormdata$EVTYPE, sum))
test<-tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
max(test)
test==91346
names(test==91346)
names(test=="91346")
test<-tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
test
test[max(test)]
max(test)
str(test)
max(test)
test==91346
test(test==91346)
test[test==91346]
test[max(test)]
test[test==max(test)]
stormdata$FATALITIES
fatal<-tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
fatal
fatal[fatal==max(fatal)]
fatal<-tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
fatal[fatal==max(fatal)]
inj<-tapply(stormdata$INJURIES, stormdata$EVTYPE, sum)
inj[inj==max(inj)]
fatal<-tapply(stormdata$FATALITIES, stormdata$EVTYPE, sum)
fatal[fatal==max(fatal)]
inj[inj==max(inj)]
fatal<-tapply(stormdata$FATALITIES, stormdata$EVTYPE, sum)
fatal[fatal==max(fatal)]
hist(inj)
inj
hist(inj)
install.packages("dplyr")
quizurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(quizurl, "getdata%2Fdata%2Fss06hid.csv")
quizdata<-read.csv("getdata%2Fdata%2Fss06hid.csv")
str(quizdata$ACR)
str(quizdata$AGS)
summary(quizdata$AGS)
agricultureLogical<-quizdata[quizdata$AGS>6 & quizdata$acr>3]
which(agricultureLogical)
agricultureLogical
agricultureLogical<-quizdata[quizdata$AGS>6 & quizdata$acr>3,]
which(agricultureLogical)
agricultureLogical
agricultureLogical
agricultureLogical<-quizdata[quizdata$AGS>6 && quizdata$acr>3]
agricultureLogical<-quizdata[quizdata$AGS>6 & quizdata$acr>3]
agricultureLogical
[quizdata$AGS>6]
agricultureLogical<-quizdata[(quizdata$AGS>6 & quizdata$acr>3)]
agricultureLogical
quizdata$AGS>6
agricultureLogical<-quizdata[(quizdata$AGS==6 & quizdata$acr==3)]
agricultureLogical
agricultureLogical<-quizdata[(quizdata$AGS==6 & quizdata$acr==3)]
quizdata$ACR==3
any(quizdata$ACR==3)
agricultureLogical<-quizdata[(quizdata$AGS==6 & quizdata$ACR==3)]
agricultureLogical<-quizdata[(quizdata$AGS==6 & quizdata$ACR==3),]
agricultureLogical
agricultureLogical
which(agricultureLogical)
agricultureLogical<-quizdata[quizdata$AGS==6 & quizdata$ACR==3]
agricultureLogical<-quizdata[quizdata$AGS==6 & quizdata$ACR==3,]
which(agricultureLogical)
str(agricultureLogical)
quizdata$AGS==6 & quizdata$ACR==3
agriculturelogical<-quizdata$AGS==6 & quizdata$ACR==3
which(agriculturelogical)
install.packages("jpeg")
jpegurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
library("jpeg")
readJPEG(jpegurl, native=TRUE)
readJPEG(jpegurl, native=TRUE)
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE)
?readJPEG()
readJPEG(system.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE))
readJPEG(system.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE))
imgurl<-"C:\Users\choje2\Desktop\getdata-jeff.jpg"
readJPEG("getdata-jeff.jpg")
readJPEG("getdata-jeff.jpg", native=TRUE)
jpegq<-readJPEG("getdata-jeff.jpg", native=TRUE)
summary(jpegq)
quantile(jpegq, probs = c(0.3, 0.8))
quiz3url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv "
download.file(quiz3url)
download.file(quiz3url, "getdata%2Fdata%2FGDP.csv")
quiz3burl<="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv "
quiz3burl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
quiz3burl<-read.csv(quiz3burl, getdata%2Fdata%2FEDSTATS_Country.csv)
quiz3burl<-read.csv(quiz3burl,getdata%2Fdata%2FEDSTATS_Country.csv)
quiz3burl<-read.csv(quiz3burl,"getdata%2Fdata%2FEDSTATS_Country.csv")
download.file(quiz3burl,"getdata%2Fdata%2FEDSTATS_Country.csv")
quiz3burl<-read.csv(quiz3burl,"getdata%2Fdata%2FEDSTATS_Country.csv")
quiz3burl<-read.csv(quiz3burl,"getdata%2Fdata%2FEDSTATS_Country.csv")
quiz3burl<-read.csv("getdata%2Fdata%2FEDSTATS_Country.csv")
quiz3burl
quiz3url
quiz3b<-read.csv("getdata%2Fdata%2FEDSTATS_Country.csv")
download.file(quiz3url)
quiz3<-read.csv("getdata%2Fdata%2FGDP.csv")
quiz3
file.path(getwd(),)
file.path(getwd())
?file.path
setwd("~/R/Coursera/Getting & Cleaning Data/Course Project")
path<-getwd()
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
file<-"getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if (!file.exists(path)){
dir.create(path)
}
download.file(url, file.path(path,file))
zip.unpack("getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",path)
unzip(file)
?dir.creat
?dir.create
subfolder<-file.path(path,"UCI HAR Dataset")
list.files(subfolder, recursive=TRUE)
?file.path
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
xtrain
str(xtrain)
str(xtrain)
subjtrain <- read.table(file.path(pathIn, "train", "subject_train.txt"))
subjtest <- read.table(file.path(pathIn, "test", "subject_test.txt"))
ytrain <- read.table(file.path(pathIn, "train", "Y_train.txt"))
ytest <- read.table(file.path(pathIn, "test", "Y_test.txt"))
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
subjtrain <- read.table(file.path(subfolder, "train", "subject_train.txt"))
subjtest <- read.table(file.path(subfolder, "test", "subject_test.txt"))
ytrain <- read.table(file.path(subfolder, "train", "Y_train.txt"))
ytest <- read.table(file.path(subfolder, "test", "Y_test.txt"))
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
xtest <- read.table(file.path(subfolder, "test", "X_test.txt"))
?setkey
library(reshape2)
?setkey
library(data.tabl)
library(data.table)
setkey
?setkey
library(reshape2)
library(data.table)
subjtrain <- read.table(file.path(subfolder, "train", "subject_train.txt"))
subjtest <- read.table(file.path(subfolder, "test", "subject_test.txt"))
ytrain <- read.table(file.path(subfolder, "train", "Y_train.txt"))
ytest <- read.table(file.path(subfolder, "test", "Y_test.txt"))
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
xtest <- read.table(file.path(subfolder, "test", "X_test.txt"))
subjfull <- rbind(subjtrain, subjtest)
setnames(subjfull, "V1", "subject")
yfull <- rbind(ytrain, ytest)
setnames(yfull, "V1", "activityNum")
xfull <- rbind(xtrain, xtest)
subjy <- cbind(subjfull, yfull)
fulldata <- cbind(subjy, xfull)
str(fulldata)
setkey(fulldata, subject, activityNum)
setkey(as.data.table(fulldata), subject, activityNum)
fulldata<-data.table(fulldata)
setkey(fulldata, subject, activityNum)
setkey(fulldata, c(subject, activityNum))
setkey(fulldata,subject)
setkey(fulldata,subject,activityNum)
setkey(fulldata,subject,activityNum)
setkey(fulldata,"subject","activityNum")
subjtrain <- read.table(file.path(subfolder, "train", "subject_train.txt"))
subjtest <- read.table(file.path(subfolder, "test", "subject_test.txt"))
ytrain <- read.table(file.path(subfolder, "train", "Y_train.txt"))
ytest <- read.table(file.path(subfolder, "test", "Y_test.txt"))
xtrain<-read.table(file.path(subfolder,"train","X_train.txt"))
xtest <- read.table(file.path(subfolder, "test", "X_test.txt"))
subjfull <- rbind(subjtrain, subjtest)
setnames(subjfull, "V1", "subject")
yfull <- rbind(ytrain, ytest)
setnames(yfull, "V1", "activityNum")
xfull <- rbind(xtrain, xtest)
subjy <- cbind(subjfull, yfull)
fulldata <- cbind(subjy, xfull)
fulldata<-data.table(fulldata)
setkey(fulldata,subject,activityNum)
?Setkey
?setkey
setkey(fulldata)
str(fulldata)
sapply(packages, require, character.only = TRUE, quietly = TRUE)
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
setkey(fulldata,subject,activityNum)
library(reshape2)
library(data.table)
path<-getwd()
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
file<-"getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
#Set working directory
#Check Directory
if (!file.exists(path)){
dir.create(path)
#Download file
}
download.file(url, file.path(path,file))
#Unzip file
unzip(file)
list.files(subfolder, recursive=TRUE)
subjtrain <- read.table(file.path(subfolder, "train", "subject_train.txt"))
subjtest <- read.table(file.path(subfolder, "test", "subject_test.txt"))
ytrain <- read.table(file.path(subfolder, "train", "Y_train.txt"))
subfolder<-file.path(path,"UCI HAR Dataset")
